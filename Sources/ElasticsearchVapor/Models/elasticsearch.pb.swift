// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: elasticsearch.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct ElasticsearchSearchResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var took: Int32 {
    get {return _storage._took}
    set {_uniqueStorage()._took = newValue}
  }

  public var timedOut: Bool {
    get {return _storage._timedOut}
    set {_uniqueStorage()._timedOut = newValue}
  }

  public var scrollID: String {
    get {return _storage._scrollID}
    set {_uniqueStorage()._scrollID = newValue}
  }

  public var shards: ElasticsearchSearchResponse.ShardResult {
    get {return _storage._shards ?? ElasticsearchSearchResponse.ShardResult()}
    set {_uniqueStorage()._shards = newValue}
  }
  /// Returns true if `shards` has been explicitly set.
  public var hasShards: Bool {return _storage._shards != nil}
  /// Clears the value of `shards`. Subsequent reads from it will return its default value.
  public mutating func clearShards() {_uniqueStorage()._shards = nil}

  public var hits: ElasticsearchSearchResponse.HitResults {
    get {return _storage._hits ?? ElasticsearchSearchResponse.HitResults()}
    set {_uniqueStorage()._hits = newValue}
  }
  /// Returns true if `hits` has been explicitly set.
  public var hasHits: Bool {return _storage._hits != nil}
  /// Clears the value of `hits`. Subsequent reads from it will return its default value.
  public mutating func clearHits() {_uniqueStorage()._hits = nil}

  public var aggregations: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _storage._aggregations ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_uniqueStorage()._aggregations = newValue}
  }
  /// Returns true if `aggregations` has been explicitly set.
  public var hasAggregations: Bool {return _storage._aggregations != nil}
  /// Clears the value of `aggregations`. Subsequent reads from it will return its default value.
  public mutating func clearAggregations() {_uniqueStorage()._aggregations = nil}

  public var error: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _storage._error ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {_uniqueStorage()._error = nil}

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var terminatedEarly: Bool {
    get {return _storage._terminatedEarly}
    set {_uniqueStorage()._terminatedEarly = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct ShardResult {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var total: Int32 = 0

    public var successful: Int32 = 0

    public var skipped: Int32 = 0

    public var failed: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct HitData {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var index: String {
      get {return _storage._index}
      set {_uniqueStorage()._index = newValue}
    }

    public var type: String {
      get {return _storage._type}
      set {_uniqueStorage()._type = newValue}
    }

    public var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    public var score: Double {
      get {return _storage._score}
      set {_uniqueStorage()._score = newValue}
    }

    public var source: SwiftProtobuf.Google_Protobuf_Struct {
      get {return _storage._source ?? SwiftProtobuf.Google_Protobuf_Struct()}
      set {_uniqueStorage()._source = newValue}
    }
    /// Returns true if `source` has been explicitly set.
    public var hasSource: Bool {return _storage._source != nil}
    /// Clears the value of `source`. Subsequent reads from it will return its default value.
    public mutating func clearSource() {_uniqueStorage()._source = nil}

    public var sort: SwiftProtobuf.Google_Protobuf_Struct {
      get {return _storage._sort ?? SwiftProtobuf.Google_Protobuf_Struct()}
      set {_uniqueStorage()._sort = newValue}
    }
    /// Returns true if `sort` has been explicitly set.
    public var hasSort: Bool {return _storage._sort != nil}
    /// Clears the value of `sort`. Subsequent reads from it will return its default value.
    public mutating func clearSort() {_uniqueStorage()._sort = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct HitResults {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var total: Int32 = 0

    public var maxScore: Double = 0

    public var hits: [ElasticsearchSearchResponse.HitData] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ElasticsearchSearchResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ElasticsearchSearchResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "took"),
    2: .standard(proto: "timed_out"),
    3: .standard(proto: "_scroll_id"),
    4: .standard(proto: "_shards"),
    5: .same(proto: "hits"),
    6: .same(proto: "aggregations"),
    7: .same(proto: "error"),
    8: .same(proto: "status"),
    9: .standard(proto: "terminated_early"),
  ]

  fileprivate class _StorageClass {
    var _took: Int32 = 0
    var _timedOut: Bool = false
    var _scrollID: String = String()
    var _shards: ElasticsearchSearchResponse.ShardResult? = nil
    var _hits: ElasticsearchSearchResponse.HitResults? = nil
    var _aggregations: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _error: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _status: Int32 = 0
    var _terminatedEarly: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _took = source._took
      _timedOut = source._timedOut
      _scrollID = source._scrollID
      _shards = source._shards
      _hits = source._hits
      _aggregations = source._aggregations
      _error = source._error
      _status = source._status
      _terminatedEarly = source._terminatedEarly
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._took)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._timedOut)
        case 3: try decoder.decodeSingularStringField(value: &_storage._scrollID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._shards)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._hits)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._aggregations)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._error)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._terminatedEarly)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._took != 0 {
        try visitor.visitSingularInt32Field(value: _storage._took, fieldNumber: 1)
      }
      if _storage._timedOut != false {
        try visitor.visitSingularBoolField(value: _storage._timedOut, fieldNumber: 2)
      }
      if !_storage._scrollID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._scrollID, fieldNumber: 3)
      }
      if let v = _storage._shards {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._hits {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._aggregations {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 8)
      }
      if _storage._terminatedEarly != false {
        try visitor.visitSingularBoolField(value: _storage._terminatedEarly, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ElasticsearchSearchResponse, rhs: ElasticsearchSearchResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._took != rhs_storage._took {return false}
        if _storage._timedOut != rhs_storage._timedOut {return false}
        if _storage._scrollID != rhs_storage._scrollID {return false}
        if _storage._shards != rhs_storage._shards {return false}
        if _storage._hits != rhs_storage._hits {return false}
        if _storage._aggregations != rhs_storage._aggregations {return false}
        if _storage._error != rhs_storage._error {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._terminatedEarly != rhs_storage._terminatedEarly {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ElasticsearchSearchResponse.ShardResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = ElasticsearchSearchResponse.protoMessageName + ".ShardResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "successful"),
    3: .same(proto: "skipped"),
    4: .same(proto: "failed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.total)
      case 2: try decoder.decodeSingularInt32Field(value: &self.successful)
      case 3: try decoder.decodeSingularInt32Field(value: &self.skipped)
      case 4: try decoder.decodeSingularInt32Field(value: &self.failed)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 1)
    }
    if self.successful != 0 {
      try visitor.visitSingularInt32Field(value: self.successful, fieldNumber: 2)
    }
    if self.skipped != 0 {
      try visitor.visitSingularInt32Field(value: self.skipped, fieldNumber: 3)
    }
    if self.failed != 0 {
      try visitor.visitSingularInt32Field(value: self.failed, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ElasticsearchSearchResponse.ShardResult, rhs: ElasticsearchSearchResponse.ShardResult) -> Bool {
    if lhs.total != rhs.total {return false}
    if lhs.successful != rhs.successful {return false}
    if lhs.skipped != rhs.skipped {return false}
    if lhs.failed != rhs.failed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ElasticsearchSearchResponse.HitData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = ElasticsearchSearchResponse.protoMessageName + ".HitData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_index"),
    2: .standard(proto: "_type"),
    3: .standard(proto: "_id"),
    4: .standard(proto: "_score"),
    5: .standard(proto: "_source"),
    6: .standard(proto: "_sort"),
  ]

  fileprivate class _StorageClass {
    var _index: String = String()
    var _type: String = String()
    var _id: String = String()
    var _score: Double = 0
    var _source: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _sort: SwiftProtobuf.Google_Protobuf_Struct? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _index = source._index
      _type = source._type
      _id = source._id
      _score = source._score
      _source = source._source
      _sort = source._sort
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._index)
        case 2: try decoder.decodeSingularStringField(value: &_storage._type)
        case 3: try decoder.decodeSingularStringField(value: &_storage._id)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._score)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._source)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._sort)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._index.isEmpty {
        try visitor.visitSingularStringField(value: _storage._index, fieldNumber: 1)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 2)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 3)
      }
      if _storage._score != 0 {
        try visitor.visitSingularDoubleField(value: _storage._score, fieldNumber: 4)
      }
      if let v = _storage._source {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._sort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ElasticsearchSearchResponse.HitData, rhs: ElasticsearchSearchResponse.HitData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._index != rhs_storage._index {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._score != rhs_storage._score {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._sort != rhs_storage._sort {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ElasticsearchSearchResponse.HitResults: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = ElasticsearchSearchResponse.protoMessageName + ".HitResults"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .standard(proto: "max_score"),
    3: .same(proto: "hits"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.total)
      case 2: try decoder.decodeSingularDoubleField(value: &self.maxScore)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.hits)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 1)
    }
    if self.maxScore != 0 {
      try visitor.visitSingularDoubleField(value: self.maxScore, fieldNumber: 2)
    }
    if !self.hits.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hits, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ElasticsearchSearchResponse.HitResults, rhs: ElasticsearchSearchResponse.HitResults) -> Bool {
    if lhs.total != rhs.total {return false}
    if lhs.maxScore != rhs.maxScore {return false}
    if lhs.hits != rhs.hits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
